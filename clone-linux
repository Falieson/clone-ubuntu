#!/bin/bash

# This script automates the process of cloning linux systems into another partition
# or device in a seamlessly and safely way.
# By Thiago Silva

# This script is a fork of the one posted by WinEunuuchs2Unix at askubuntu 
# (https://bit.ly/34RNGbv) as a tool to avoid losing the whole system when 
# upgrading from 16.04, 17.04 or 17.10 LTS to 18.04 LTS.

# I removed some functionalities like changing release-upgrades file, moving 
# your cron jobs to a hold folder, among other things. I also added the ability
# to detect and clone, not just the root partition, but the /home partition too,
# among other coding tweaks to turn the cloning process more safe and intuitive.

# =================================================================================

# Make sure the script has the aproppriate enviroment and root privileges. 

# $TERM variable may be missing when called via desktop shortcut
CurrentTERM=$(env | grep TERM)
if [ "$CurrentTERM" = "" ] ; then
    notify-send --urgency=critical \
        "$0 cannot be run from GUI without TERM environment variable."
    exit 1
fi
# Must run as root
if [ "$(id -u)" -ne 0 ] ; then 
    echo "Usage: sudo $0" 
    exit 1
fi

# Create unqique temporary file names

TmpUUIDList=$(mktemp /tmp/clone-ubuntu.XXXXX)  
TmpWhiptailMenu=$(mktemp /tmp/clone-ubuntu.XXXXX)
TmpSrcInf=$(mktemp /tmp/clone-ubuntu.XXXXX) 
TmpTrgtInf=$(mktemp /tmp/clone-ubuntu.XXXXX)
TmpDistInf=$(mktemp /tmp/clone-ubuntu.XXXXXi)

# Create repeatable code functions.

# Removes temporary files and umount clone partitions
CleanUp () {
    [ -f "$TmpUUIDList" ] && rm -f "$TmpUUIDList"
    [ -f "$TmpWhiptailMenu" ] && rm -f "$TmpWhiptailMenu"
    [ -f "$TmpSrcInf" ] && rm -f "$TmpSrcInf" 
    [ -f "$TmpTrgtInf" ] && rm -f "$TmpTrgtInf"
    [ -f "$TmpDistInf" ] && rm -f "$TmpDistInf"
    if [ -d "$TargetBootMnt" ]; then		
        umount "$TargetBootMnt" -l             
        rm -d "$TargetBootMnt"                
    fi
    if [ -d "$TargetHomeMnt" ]; then
	umount "$TargetHomeMnt" -l
	rm -d "$TargetHomeMnt"
    fi
}

# Gets UUIDs of source and clone target partitions in menu.
GetUUID () {
    SrchLine="$1"                           # menu line passed to function
    UUID_col=0                              # start column of UUID in line
    lsblk -o NAME,UUID > "$TmpUUIDList"         # Get list of UUID's
    while read -r UUID_Line; do             # Read through UUID list
        # Establish UUID position on line
        if [ $UUID_col = 0 ] ; then      # First time will be heading
            UUID_col="${UUID_Line%%UUID*}"  # Establish column number
            UUID_col="${#UUID_col}"         #  where UUID appears on line
            NameLen=$(( UUID_col - 1 ))     # Max length of partition name
            continue                        # Skip to read next line
        fi
        # Check if Passed line name (/dev/sda1, /nvme01np8, etc.) matches.
        if [ "${UUID_Line:0:$NameLen}" = "${SrchLine:0:$NameLen}" ] ; then
            FoundUUID="${UUID_Line:UUID_col:999}"
            break                           # exit function
        fi
    done < "$TmpUUIDList"                       # Read next line & loop back
}

# Builds information about source & target partitions
DistInfo () {
    Mount="$1"                              # Mount name is '/' or $TargetBootMnt
    FileName="$2"                           # "$TmpSrcInf" or "$TmpTrgtInf" work file
    cat "$Mount"/etc/lsb-release >> "$FileName"
    sed -i 's/DISTRIB_//g' "$FileName"      # Remove DISTRIB_ prefix.
    sed -i 's/=/:=/g' "$FileName"           # Change "=" to ":="
    sed -i 's/"//g' "$FileName"             # Remove " around "Ubuntu 16.04...".
    # Align columns from "Xxxx:=Yyyy" to "Xxxx:      Yyyy"
    cat "$FileName" | column -t -s '=' > "$TmpDistInf"
    cat "$TmpDistInf" > "$FileName"
}

# verify if it's a ext4 filesystem and a umounted partition.
Validate () {
    VltLine="$1"
    if [ "${VltLine:FSTYPE_col:4}" != "ext4" ] ; then
        echo "Only 'ext4' partitions can be clone targets."
        read -p "Press <Enter> to continue"
	exit 2
    fi
    if [ "${VltLine:MOUNTPOINT_col:4}" != "    " ] ; then
        echo "A Mounted partition cannot be a clone target."
        read -p "Press <Enter> to continue"
	exit 3
    fi
}    

# Build whiptail menu tags and text into an array.

lsblk -o NAME,FSTYPE,LABEL,SIZE,MOUNTPOINT > "$TmpWhiptailMenu"
i=0
SPACES='                                                                     '
DoHeading=true
AllPartsArr=()      # All partitions.
while read -r Line; do
    if [[ $DoHeading = true ]] ; then
        DoHeading=false                     # First line is the heading.
        MenuText="$Line"                    # Heading for whiptail.
        FSTYPE_col="${Line%%FSTYPE*}"           
        FSTYPE_col="${#FSTYPE_col}"         # Required to ensure `ext4`.
        MOUNTPOINT_col="${Line%%MOUNTPOINT*}"
        MOUNTPOINT_col="${#MOUNTPOINT_col}" # Required to ensure not mounted.
        continue
    fi
    Line="$Line$SPACES"                     # Pad extra white space.
    Line=${Line:0:74}                       # Truncate to 74 chars for menu.
    # Get Boot source UUID and device.
    if [[ "${Line:MOUNTPOINT_col:4}" = "/   " ]] ; then
        GetUUID "$Line"
        SourceBootUUID=$FoundUUID
        # Build "/dev/Xxxxx" FS name from "├─Xxxxx" lsblk line
        SourceBootDev="${Line%% *}"
        SourceBootDev=/dev/"${SourceBootDev:2:999}"
    fi
    # Get Home source UUID and device.
    if [[ "${Line:MOUNTPOINT_col:5}" = "/home" ]] ; then
        GetUUID "$Line"
        SourceHomeUUID=$FoundUUID
        # Build "/dev/Xxxxx" FS name from "├─Xxxxx" lsblk line
        SourceHomeDev="${Line%% *}"
        SourceHomeDev=/dev/"${SourceHomeDev:2:999}"
    fi
    AllPartsArr+=("$i" "$Line")               # Menu array entry = Tag# + Text.
    (( i++ ))
done < "$TmpWhiptailMenu"                           # Read next "lsblk" line.

# Display whiptail menu in while loop until no errors, or escape,
# or valid partion selection.

while true; do
    # Call whiptail box to paint menu, get user selection and validate it.
    Choice=$(whiptail \
        --title "Select the target boot partition. It must be ext4 and unmounted." \
        --backtitle "Clone Ubuntu system to another partition or device" \
        --ok-button "Select unmounted partition" \
        --cancel-button "Exit" \
        --notags \
        --menu "$MenuText" 24 80 16 \
        "${AllPartsArr[@]}" \
        2>&1 >/dev/tty)
    clear                               # Clear screen.
    if [ "$Choice" = "" ]; then        # Escape or whiptail "Exit".
        CleanUp
        exit 0;
    fi
    ArrIdx=$(( $Choice * 2 + 1))        # Calculate array offset.
    Line="${AllPartsArr[$ArrIdx]}"      # Array entry into $Line.
    #Get UUID of source partition and build target device name from menu line.
    GetUUID "$Line"                      
    TargetBootUUID=$FoundUUID
    TargetBootDev="${Line%% *}"
    TargetBootDev=/dev/"${TargetBootDev:2:999}"
    Validate "$Line"
    [ "$?" = 2 ] || [ "$?" = 3 ] && continue
    # If there is a /home partition, clone it.
    if lsblk | grep -w "/home"; then
	Choice=$(whiptail \
	  --title "/home partition found. Select the target Home partition" \
	  --backtitle "Clone Ubuntu system to another partition or device" \
	  --ok-button "Select unmounted partition" \
	  --cancel-button "Exit" \
	  --notags \
	  --menu "$MenuText" 24 80 16 \
	  "${AllPartsArr[@]}" \
	  2>&1 >/dev/tty)
	clear                               # Clear screen.
	if [[ $Choice = "" ]]; then        # Escape or whiptail "Exit".
	   CleanUp
	   exit 0;
	fi
	ArrIdx=$(( $Choice * 2 + 1))        # Calculate array offset.
	Line="${AllPartsArr[$ArrIdx]}"      # Array entry into $Line.
	#Get UUID of source partition and build target device name from menu line.
	GetUUID "$Line"                      
	TargetHomeUUID=$FoundUUID
	TargetHomeDev="${Line%% *}"
	TargetHomeDev=/dev/"${TargetHomeDev:2:999}"
	Validate "$Line"
	[ "$?" = 2 ] || [ "$?" = 3 ] && continue
    fi
    break                                   # Validated: Break menu loop.
done                                        # Loop while errors.

# Get confirmation about boot and clone partitions.

TargetBootMnt='/mnt/bootclone'
echo ""
echo "=========================================================================="
echo "Mounting Boot partition $TargetBootDev as $TargetBootMnt"
mkdir -p "$TargetBootMnt"
mount -t ext4 "$TargetBootDev" "$TargetBootMnt"
echo ""
echo "=========================================================================="
echo "PLEASE: Carefully confirm Source (Live) and Target (Clone) partitions"
echo
# Build source information (our current boot partition)
echo "SOURCE (BOOT /)=$SourceBootDev"  > "$TmpSrcInf"
DistInfo "/" "$TmpSrcInf"                     # /etc/lsb-release information
df -h --output=size,used,avail,pcent "$SourceBootDev" >> "$TmpSrcInf"
# Build target information (the partition selected for cloning to)
LineCnt=$(ls "$TargetBootMnt" | wc -l)
if (( LineCnt > 1 )) ; then 
    # More than /Lost+Found exist, so it's not an empty partition.
    if [ -f "$TargetBootMnt"/etc/lsb-release ] ; then
        echo "TARGET (CLONE)=$TargetBootDev" > "$TmpTrgtInf"
        DistInfo "$TargetBootMnt" "$TmpTrgtInf"    # /etc/lsb_release information
    else
        # Don't select partitions other than the system root partition.
        echo "Selected partition is not a Ubuntu system root one. Aborting."
        CleanUp                             # Remove temporary files
        exit 1
    fi
else
    if [ "$(ls "$TargetBootMnt" | head -n1)" = "lost+found" ]; then
	echo "Target ("$TargetBootDev") partition is empty" > "$TmpTrgtInf"
	echo "There's only the lost+found folder" >> "$TmpTrgtInf"
	echo "See below if there is enough space." >> "$TmpTrgtInf"
    fi
fi
df -h --output=size,used,avail,pcent "$TargetBootDev" >> "$TmpTrgtInf"
# Display boot source and target partitions side-by-side.
tput bold       # Set to bold text
paste -d '|' "$TmpSrcInf" "$TmpTrgtInf" | column -t -s '|'
tput sgr0       # Reset to normal text
# Warning about recloning.
echo
echo "NOTE: If you are recloning, new files in clone will be deleted,"
echo "      modified files are reset to current source content and,"
echo "      files deleted from clone are added back from source."
echo 
# Confirmation to proceed.
read -p "Type Y (or y) to proceed. Any other key to exit: " -n 1
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
    CleanUp             # Remove temporary files
    exit 0
fi

# Copy boot partition to target partition and update fstab and grub menu.

# If there's a /home partition, don't copy it.
if [ -n "$TargetHomeDev" ]; then
    SECONDS=0
    echo 
    echo "=========================================================================="
    echo "Using rsync to clone / to $TargetBootDev mounted as $TargetBootMnt"
    rsync -axhAX --info=progress2 --info=name0 --delete --inplace --stats   \
        /* "$TargetBootMnt"                                                   \
	--exclude={/home/*,/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found}
    rsyncTime=$SECONDS  
    echo 
    echo "Time to clone files: $rsyncTime seconds"
# If there isn't a /home partition, don't exclude /home directory from copying.
else
    SECONDS=0
    echo 
    echo "=========================================================================="
    echo "Using rsync to clone / to $TargetBootDev mounted as $TargetBootMnt"
    rsync -axhAX --info=progress2 --info=name0 --delete --inplace --stats   \
	/* "$TargetBootMnt"                                                   \
	--exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found}
    rsyncTime=$SECONDS  
    echo 
    echo "Time to clone files: $rsyncTime seconds"
fi
# Update /etc/fstab on clone partition with clone's UUID
echo 
echo "=========================================================================="
echo "Making changes in: $TargetBootMnt/etc/fstab"
echo "        from UUID: $SourceBootUUID"
echo "          to UUID: $TargetBootUUID"
sed -i "s/$SourceBootUUID/$TargetBootUUID/g" "$TargetBootMnt"/etc/fstab
# Update /boot/grub/grub.cfg on clone partition with clone's UUID
echo ""
echo "=========================================================================="
echo "Making changes in: $TargetBootMnt/boot/grub/grub.cfg"
echo "        from UUID: $SourceBootUUID"
echo "          to UUID: $TargetBootUUID"
sed -i "s/$SourceBootUUID/$TargetBootUUID/g" "$TargetBootMnt"/boot/grub/grub.cfg
# Update grub boot menu
echo ""
echo "=========================================================================="
echo "Calling 'update-grub' to create new boot menu"
update-grub

# Get confirmation about home and clone partitions.

if [ -n "$TargetHomeDev" ]; then	
    # Mount home partition.
    TargetHomeMnt='/mnt/homeclone'
    echo 
    echo "=========================================================================="
    echo "Mounting Home partition $TargetHomeDev as $TargetHomeMnt"
    mkdir "$TargetHomeMnt" 
    mount -t ext4 "$TargetHomeDev" "$TargetHomeMnt"
    echo 
    echo "=========================================================================="
    echo "PLEASE: Carefully confirm Source (Live) and Target (Clone) partitions"
    echo
    # Build source information (our current boot partition)
    echo "SOURCE (HOME /home)=$SourceHomeDev"  > "$TmpSrcInf"
    echo "Check the size of your source" >> "$TmpSrcInf"
    echo "home partition. Compare with the" >> "$TmpSrcInf"
    echo "size of your target home partition." >> "$TmpSrcInf"
    df -h --output=size,used,avail,pcent "$TargetHomeDev" >> "$TmpSrcInf"
    # Build target information (the partition selected for cloning to)
    LineCnt=$(ls "$TargetHomeMnt" | wc -l)
    # Test if target home partition is empty.
    if (( LineCnt > 1 )); then 
	# If it's not empty and it's a root system, abort. 	
	if [ -f "$TargetHomeMnt"/etc/lsb-release ] ; then
	    echo "Selected partition is a root partition. Aborting."
	    CleanUp
	    exit 1
	# If it isn't a root partition, make sure it's your home partition.
	else
	    echo "This is not a root system partition." > "$TmpTrgtInf"
	    echo "Make sure it's your target home partition." >> "$TmpTrgtInf"
	    echo "YOU MAY LOSE YOUR PARTITION DATA, IF IT'S NOT" >> "$TmpTrgtInf"
	    echo "YOUR ACTUAL HOME PARTITION, WHEN RECLONING." >> "$TmpTrgtInf"
	    df -h --output=size,used,avail,pcent "$TargetHomeDev" >> "$TmpTrgtInf"
	fi
    # If it's an empty partition, make sure it has the appropriate size.
    else
	echo "Target ("$TargetHomeDev") partition is empty" > "$TmpTrgtInf"
	echo "There's only the lost+found folder" >> "$TmpTrgtInf"
	echo "MAKE SURE IT HAS ENOUGH SPACE TO HOLD" >> "$TmpTrgtInf"
	echo "YOUR SOURCE HOME PARTITION." >> "$TmpTrgtInf"
	df -h --output=size,used,avail,pcent "$TargetHomeDev" >> "$TmpTrgtInf"
    fi
    # Display home source and target partitions side-by-side.
    tput bold       # Set to bold text
    paste -d '|' "$TmpSrcInf" "$TmpTrgtInf" | column -t -s '|'
    tput sgr0       # Reset to normal text
    # Warning about recloning.
    echo
    echo "NOTE: If you are recloning, new files in clone will be deleted,"
    echo "      modified files are reset to current source content and,"
    echo "      files deleted from clone are added back from source."
    echo 
    # Confirmation to proceed. 
    read -p "Type Y (or y) to proceed. Any other key to exit: " -n 1
    echo    # (optional) move to a new line
    if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
	CleanUp             # Remove temporary files
	exit 0
    fi

    # Copy home partition to target partition. 

    SECONDS=0
    echo 
    echo "=========================================================================="
    echo "Using rsync to clone /home to $TargetHomeDev mounted as $TargetHomeMnt"
    rsync -axhAX --info=progress2 --info=name0 --delete --inplace --stats   \
	/home/* "$TargetHomeMnt"
    rsyncTime=$SECONDS  
    echo 
    echo "Time to clone files: $rsyncTime seconds"
    # Update /etc/fstab on clone partition with clone's UUID
    echo 
    echo "=========================================================================="
    echo "Making changes in: $TargetBootMnt/etc/fstab"
    echo "        from UUID: $SourceHomeUUID"
    echo "          to UUID: $TargetHomeUUID"
    sed -i "s/$SourceHomeUUID/$TargetHomeUUID/g" "$TargetBootMnt"/etc/fstab
    # Display Unmount home clone partition message.
    echo 
    echo "=========================================================================="
    echo "Unmounting $TargetHomeDev as $TargetHomeMnt"
fi
# Display umount boot partition message.
echo 
echo "=========================================================================="
echo "Unmounting $TargetBootDev as $TargetBootMnt"
echo

# Unmount clone partitions, remove temporaty files and exit script.

CleanUp             
exit 0
